// Package apigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package apigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xWXU/zNhT+K9HZLt0mLZ2EIu1iSIz1YhMa9ApVk0kOiSGxje107ar89+nYaZu2YXAB",
	"mt73LrHP5/OcD28hU7VWEqWzkG5Bc8NrdGj838Kimee33JX0l6PNjNBOKAkpNBZNJHJggGte6wohnTAQ",
	"dKVJgYHkNXaCc5Iz+NoIgzmkzjTIwGYl1pwsu40mSSEdFmiAwXpUqFF32gjpoG1bMmC1khZ9bFc8/xNf",
	"G7SO/jIlHUr/ybWuRMYpzPjZUqzbnqsfDT5BCj/Eh7zjcGvja2OUCa6Oc33keWQ6Zy2DuXRoJK/u0KzQ",
	"BK0vj0F0TiPrvUYYBBn8odyvqpH514cglYuevCu668TJ2h6CfSlQKDmxlyTJKEkSYFCjtbygs4V8kepv",
	"GV3vUtBGaTROBGaD5r4qrDNCFiS2t3B21/ar6yFYOMgvGTjhKKwuUrbTV4/PmHlOqdRPMngUClL4fRNR",
	"IUfCRvfcqHF0X3L5Em1UMwYGIlPyr8ZUkELpnLZpHHcWxpmqY1HzAm08mV7MSDj3PdL1BVk7T947Hcj9",
	"4GjoMv9gF+2cvweg72sv2sPOQ/QGdPfqjq/wqwH8ZOQIIcW1GFG9FChHuHaGjxwvvMEVr0TOnUfPVB6j",
	"YfQ+bqfm658n0900O+A9BHUH6RngpCvkU0i2k7/ziEW/3M4tMFihsaFjJ+OEIFAaJdcCUrgYJ+MLYH5E",
	"++DiEnnlyn/ou0B3PufDfZSVmL2AN2X8UJnnkMINut86/ZPxPE2Sc1u2yTK0NoyPpq652Zx6oKuYVkZY",
	"R8oOhJQZ5A6jJtTjcUS3yrqFVw8Io3VXKt982nDsMdOeL6VpMvmPrBnMAipDDvZ24t5m8yqz91X2O6Bl",
	"8NNHfAytsGNWjkEOtfwQZsCSeq8ZIKbR+dvENP8rL7PvhZdjjE942TdPvA3PrvbNvi7QDRN1g4Goxe7d",
	"1n8TPgwncBCJe2/Gdjk8FD6N8KFHyrfJao+NU0pJzusF+I+zrVTGK2BwvEH9aamsSy+TS9oAp2o5rrBS",
	"+kyxt3o9e10s293mDaAv238DAAD//8PnK1U3DAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
